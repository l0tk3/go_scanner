package honeypot_ident

import (
	"crypto/sha256"
	"fmt"
	"go_scanner/global"
	"io/ioutil"
	"net/http"
	"regexp"
	"strings"
	"sync"
	"time"
)

var hash_fingers [7][32]byte = [7][32]byte{
	{0xf3, 0xd6, 0xa, 0x40, 0x1f, 0xab, 0xc4, 0xca, 0x17, 0xb, 0xc6, 0xfb, 0x55, 0x69, 0x44, 0xd0, 0x6b, 0xef, 0x30, 0x60, 0x8f, 0xde, 0x21, 0xb3, 0x60, 0x8, 0x88, 0x2d, 0x7d, 0xe5, 0x93, 0x3b},
	{0x38, 0xd7, 0x9c, 0xb4, 0xe, 0xe8, 0xb8, 0x9, 0x4, 0xf6, 0x4b, 0x9d, 0x73, 0x8a, 0x3b, 0xde, 0x48, 0x59, 0xa8, 0x44, 0x50, 0x7a, 0xa2, 0x1e, 0xbf, 0x67, 0xcc, 0xf5, 0x14, 0xf3, 0x56, 0xa9},
	{0xbd, 0x6e, 0x78, 0xd0, 0x46, 0xc2, 0x91, 0x4, 0xbb, 0x25, 0xa9, 0xc2, 0x2f, 0xbf, 0xd6, 0xa8, 0xa8, 0xde, 0xeb, 0xb9, 0x7f, 0xd9, 0x4a, 0xb4, 0x3d, 0x44, 0xb2, 0x3a, 0xa3, 0xfe, 0x1a, 0x1a},
	{0x8d, 0x26, 0xc5, 0xcc, 0xc3, 0xaf, 0x88, 0xf2, 0x35, 0xac, 0x0, 0x6e, 0x8c, 0xff, 0x88, 0xa0, 0xbd, 0x83, 0xe, 0x49, 0x46, 0x1b, 0x52, 0xb6, 0x53, 0x60, 0xdc, 0x2b, 0x23, 0x98, 0xa9, 0x90},
	{0x8, 0xcb, 0xe1, 0x23, 0x64, 0xef, 0xca, 0xa0, 0x6c, 0xd1, 0xb3, 0x18, 0xfe, 0xc8, 0x6, 0x61, 0x5d, 0x17, 0xa2, 0x7d, 0xde, 0x41, 0x3, 0xd5, 0xa4, 0x2f, 0xf1, 0xff, 0xc, 0xa4, 0x1c, 0xdf},
	{0x69, 0x87, 0xb7, 0x97, 0xe5, 0xf1, 0x27, 0x7f, 0x29, 0x95, 0xe9, 0x69, 0xe7, 0x63, 0x46, 0xb5, 0x20, 0x47, 0xc9, 0x34, 0xfc, 0x62, 0x9a, 0xd1, 0x44, 0x24, 0x0, 0x78, 0x94, 0xbd, 0xe5, 0x2a},
	{0xb9, 0xab, 0xfa, 0xc4, 0xcd, 0xd1, 0x6d, 0xb3, 0xbe, 0x8e, 0x6d, 0x72, 0x73, 0x43, 0x4, 0x38, 0x16, 0x21, 0xed, 0xd6, 0xbf, 0x84, 0x47, 0x61, 0x6e, 0x67, 0x6e, 0x6a, 0xb7, 0x99, 0xc9, 0x2c},
}

func Hfish_ident(ip string) (bool, []int) {
	score := 0
	var res []int = make([]int, 0)
	var wg sync.WaitGroup
	var mutex sync.Mutex
	if len(global.Alive_port[ip]) > 5 {
		score += 3
	}
	for _, port := range global.Alive_port[ip] {
		wg.Add(1)
		go func(port int) {

			// fmt.Println(port, !strings.Contains(global.Ident_server[ip][port][0], "http"))

			if !strings.Contains(global.Ident_server[ip][port][0], "http") {
				wg.Done()
				return
			}
			url := fmt.Sprintf("http://%s:%d", ip, port)
			client := http.Client{
				Timeout: 3 * time.Second,
			}
			resp, err := client.Get(url)
			if err != nil {
				url := fmt.Sprintf("https://%s:%d", ip, port)
				resp, err = client.Get(url)
				if err != nil {
					wg.Done()
					return
				}
			}
			defer resp.Body.Close()
			content, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				wg.Done()
				return
			}
			regex := regexp.MustCompile(`data-class="(.+)"`)
			result := regex.ReplaceAll(content, []byte(`data-class=""`))
			hash := sha256.Sum256(result)
			for _, hash_finger := range hash_fingers {
				if hash_finger == hash {
					mutex.Lock()
					score += 4
					res = append(res, port)
					mutex.Unlock()
				}
			}
			wg.Done()
		}(port)
	}
	wg.Wait()
	if score >= 9 {
		return true, res
	}
	return false, res
}
